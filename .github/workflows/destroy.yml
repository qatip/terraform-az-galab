name: terraform-destroy

on:
  workflow_dispatch:
    inputs:
      scope:
        description: 'Environment to destroy: dev | test | prod | all'
        required: true
        default: 'dev'
      confirm:
        description: 'Type EXACTLY: DESTROY-<scope>  (e.g., DESTROY-dev or DESTROY-ALL)'
        required: true
        default: 'NO'

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    # Guardrails: exact confirm phrase per scope
    if: |
      (inputs.scope != 'all' && inputs.confirm == format('DESTROY-{0}', inputs.scope)) ||
      (inputs.scope == 'all' && inputs.confirm == 'DESTROY-ALL')
    runs-on: ubuntu-latest

    # One job that runs once for a single env, or 3 times when scope=all
    strategy:
      matrix:
        env: ${{ inputs.scope == 'all'
          && fromJSON('["dev","test","prod"]')
          || fromJSON(format('["{0}"]', inputs.scope)) }}

    env:
      TF_IN_AUTOMATION: true
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VERSION: 1.8.5
      STATE_RG: ${{ vars.STATE_RG }}
      STATE_STORAGE: ${{ vars.STATE_STORAGE }}
      STATE_CONTAINER: ${{ vars.STATE_CONTAINER }}

      ENV: ${{ matrix.env }}
      STATE_KEY: ${{ matrix.env }}.tfstate

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform init (remote state)
        run: |
          terraform init \
            -backend-config="resource_group_name=${STATE_RG}" \
            -backend-config="storage_account_name=${STATE_STORAGE}" \
            -backend-config="container_name=${STATE_CONTAINER}" \
            -backend-config="key=${STATE_KEY}"

      - name: Terraform destroy
        run: |
          terraform destroy -auto-approve \
            -var-file="${ENV}.tfvars" \
            -var="subscription_id=${ARM_SUBSCRIPTION_ID}" \
            -var="env=${ENV}"

      # Remove the state blob only if destroy succeeded
      - name: Delete remote state blob
        if: ${{ success() }}
        run: |
          echo "Deleting state blob: ${STATE_CONTAINER}/${STATE_KEY} in account ${STATE_STORAGE}"
          az storage blob delete \
            --account-name "${STATE_STORAGE}" \
            --container-name "${STATE_CONTAINER}" \
            --name "${STATE_KEY}" \
            --auth-mode login \
            --only-show-errors
            
